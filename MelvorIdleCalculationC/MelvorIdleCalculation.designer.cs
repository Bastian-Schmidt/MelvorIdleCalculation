#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MelvorIdleCalculationC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MelvorIdleCalculation")]
	public partial class MelvorIdleCalculationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMonster(Monster instance);
    partial void UpdateMonster(Monster instance);
    partial void DeleteMonster(Monster instance);
    #endregion
		
		public MelvorIdleCalculationDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["MelvorIdleCalculationConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MelvorIdleCalculationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MelvorIdleCalculationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MelvorIdleCalculationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MelvorIdleCalculationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Monster> Monsters
		{
			get
			{
				return this.GetTable<Monster>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Monsters")]
	public partial class Monster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Dungeon;
		
		private string _Monster1;
		
		private System.Nullable<int> _MaxHit;
		
		private string _HitType;
		
		private System.Nullable<int> _Sort;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDungeonChanging(string value);
    partial void OnDungeonChanged();
    partial void OnMonster1Changing(string value);
    partial void OnMonster1Changed();
    partial void OnMaxHitChanging(System.Nullable<int> value);
    partial void OnMaxHitChanged();
    partial void OnHitTypeChanging(string value);
    partial void OnHitTypeChanged();
    partial void OnSortChanging(System.Nullable<int> value);
    partial void OnSortChanged();
    #endregion
		
		public Monster()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dungeon", DbType="NVarChar(50)")]
		public string Dungeon
		{
			get
			{
				return this._Dungeon;
			}
			set
			{
				if ((this._Dungeon != value))
				{
					this.OnDungeonChanging(value);
					this.SendPropertyChanging();
					this._Dungeon = value;
					this.SendPropertyChanged("Dungeon");
					this.OnDungeonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Monster", Storage="_Monster1", DbType="NVarChar(50)")]
		public string Monster1
		{
			get
			{
				return this._Monster1;
			}
			set
			{
				if ((this._Monster1 != value))
				{
					this.OnMonster1Changing(value);
					this.SendPropertyChanging();
					this._Monster1 = value;
					this.SendPropertyChanged("Monster1");
					this.OnMonster1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxHit", DbType="Int")]
		public System.Nullable<int> MaxHit
		{
			get
			{
				return this._MaxHit;
			}
			set
			{
				if ((this._MaxHit != value))
				{
					this.OnMaxHitChanging(value);
					this.SendPropertyChanging();
					this._MaxHit = value;
					this.SendPropertyChanged("MaxHit");
					this.OnMaxHitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HitType", DbType="NVarChar(50)")]
		public string HitType
		{
			get
			{
				return this._HitType;
			}
			set
			{
				if ((this._HitType != value))
				{
					this.OnHitTypeChanging(value);
					this.SendPropertyChanging();
					this._HitType = value;
					this.SendPropertyChanged("HitType");
					this.OnHitTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sort", DbType="Int")]
		public System.Nullable<int> Sort
		{
			get
			{
				return this._Sort;
			}
			set
			{
				if ((this._Sort != value))
				{
					this.OnSortChanging(value);
					this.SendPropertyChanging();
					this._Sort = value;
					this.SendPropertyChanged("Sort");
					this.OnSortChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
